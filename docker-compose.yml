services:
  # todo-api service configuration
  todo-api:
    build:
      context: .
      dockerfile: Dockerfile  # 生产用 Dockerfile
    image: todo-api:v1
    container_name: todo-api-${FLASK_ENV}
    # Use common environment variables
    environment:
      # 关键：所有配置从外部 .env 文件注入（应用代码从环境变量读）
      - FLASK_ENV=${FLASK_ENV}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - API_PORT=${API_PORT}
    # volumes for live code updates
    volumes:
      - ./:/app
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    command: >
      sh -c "
        flask run --host=0.0.0.0 --port=$$API_PORT --reload
      "
    networks:
      - todo-network

  postgres:
    image: postgres:16-alpine
    container_name: todo-postgres-${FLASK_ENV}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data_${FLASK_ENV}:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      retries: 5
    networks:
      - todo-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: todo-pgadmin-${FLASK_ENV}
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data_${FLASK_ENV}:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - todo-network
    profiles:
      # 启动时加 --profile development 才会启动该服务
      - development

  mongo:
    image: mongo:7-jammy
    container_name: todo-mongo-${FLASK_ENV}
    volumes:
      - mongo_data_${FLASK_ENV}:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      retries: 5
    networks:
      - todo-network

  mongo-express:
    image: mongo-express
    container_name: todo-mongo-express-${FLASK_ENV}
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - todo-network
    profiles:
      # 启动时加 --profile development 才会启动该服务
      - development

# -------------------------- 数据卷（带环境标识，避免混叠） --------------------------
volumes:
  postgres_data_development:
  postgres_data_production:
  mongo_data_development:
  mongo_data_production:
  pgadmin_data_development:

networks:
  todo-network:
    driver: bridge